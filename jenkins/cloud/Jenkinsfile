pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'habibalmaula/spring-boot-app'
        DOCKER_TAG = "v${BUILD_NUMBER}"
        AWS_DEFAULT_REGION = 'ap-southeast-1'
        EC2_USER = 'ubuntu'
        EC2_IP = '18.140.70.237'
        APP_NAME = 'spring-boot-app'
        DEPLOY_DIR = '/opt/springboot-app'
    }
    
    stages {
        stage('Build Application') {
            agent {
                docker {
                    image 'maven:3.9.5'
                    args '''
                        -v maven-repo:/root/.m2 
                        -e MAVEN_CONFIG=/root/.m2
                        -e HOME=/root
                        --user root
                    '''
                    reuseNode true
                }
            }
            steps {
                script {
                    // Clean workspace first
                    sh 'rm -rf target/'
                    
                    // Ensure Maven repository permissions
                    sh '''
                        mkdir -p $HOME/.m2/repository
                        chmod -R 777 $HOME/.m2
                        
                        # Print working directory and list files
                        pwd
                        ls -la
                        
                        # Build with detailed output
                        mvn clean package -DskipTests -X
                        
                        # Verify JAR file exists and show its details
                        ls -la target/
                        find . -name "*.jar" -type f
                    '''
                    
                    // Verify JAR exists before stashing
                    def jarFiles = findFiles(glob: 'target/*.jar')
                    if (jarFiles.length == 0) {
                        error "No JAR files found in target directory!"
                    }
                    
                    // Stash with verification
                    stash includes: 'target/*.jar', name: 'app-jar'
                    echo "Successfully stashed JAR file"
                }
            }
        }
        
        stage('Run Tests') {
            agent {
                docker {
                    image 'maven:3.9.5'
                    args '''
                        -v maven-repo:/root/.m2 
                        -e MAVEN_CONFIG=/root/.m2
                        -e HOME=/root
                        --user root
                    '''
                    reuseNode true
                }
            }
            steps {
                script {
                    sh '''
                        mkdir -p $HOME/.m2/repository
                        chmod -R 777 $HOME/.m2
                        mvn test
                    '''
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build & Push Docker Image') {
            steps {
                script {
                    // Create a fresh directory for the JAR
                    sh 'rm -rf docker-build && mkdir -p docker-build'
                    dir('docker-build') {
                        try {
                            // Unstash with verification
                            unstash 'app-jar'
                            
                            // Verify JAR was unstashed correctly
                            sh '''
                                echo "Contents of docker-build directory:"
                                ls -la
                                
                                echo "Looking for JAR files:"
                                find . -name "*.jar" -type f
                            '''
                            
                            // Copy Dockerfile to build context
                            sh 'cp ../Dockerfile .'
                            
                            // Build and push Docker image
                            withCredentials([usernamePassword(
                                credentialsId: 'docker-hub-credentials',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_PASS'
                            )]) {
                                sh '''
                                    echo \${DOCKER_PASS} | docker login -u \${DOCKER_USER} --password-stdin
                                    docker build --platform linux/amd64 -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                                    docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                                    docker push ${DOCKER_IMAGE}:latest
                                '''
                            }
                        } catch (Exception e) {
                            echo "Error during Docker build stage: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }

         stage('Deploy to EC2') {
            steps {
                withCredentials([
                    sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY'),
                    usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')
                ]) {
                    script {
                        def deployScript = '''#!/bin/bash
                            set -e
                            
                            # Create deployment directory
                            mkdir -p /opt/springboot-app
                            
                            # Create docker-compose.yml
                            cat > /opt/springboot-app/docker-compose.yml << 'EOF'
        services:
        app:
            image: ''' + "${DOCKER_IMAGE}:${DOCKER_TAG}" + '''
            container_name: spring-boot-app
            ports:
            - "8080:8080"
            restart: always
            healthcheck:
            test: curl -f http://localhost:8080/ || exit 1
            interval: 30s
            timeout: 10s
            retries: 3
        EOF

                            # Verify the file was created correctly
                            echo "Verifying docker-compose.yml content:"
                            cat /opt/springboot-app/docker-compose.yml
                            
                            # Deploy the application
                            cd /opt/springboot-app
                            docker compose down || true
                            docker compose pull
                            docker compose up -d --force-recreate
                            
                            # Wait for container to be healthy
                            echo "Waiting for container to become healthy..."
                            for i in {1..6}; do
                                if docker ps --filter "name=spring-boot-app" --format "{{.Status}}" | grep -q "healthy"; then
                                    echo "Container is healthy!"
                                    break
                                fi
                                echo "Attempt $i/6: Waiting for container to become healthy..."
                                sleep 10
                            done
                        '''
                        
                        // Write deployment script to a file
                        writeFile file: 'deploy.sh', text: deployScript
                        
                        // Execute deployment
                        sh """
                            chmod +x deploy.sh
                            scp -i \$SSH_KEY -o StrictHostKeyChecking=no deploy.sh ${EC2_USER}@${EC2_IP}:/tmp/deploy.sh
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'bash /tmp/deploy.sh'
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'rm /tmp/deploy.sh'
                        """
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        def verificationScript = '''#!/bin/bash
                            cd /opt/springboot-app
                            
                            echo "Current docker-compose.yml content:"
                            cat docker-compose.yml
                            
                            echo -e "\nContainer Information:"
                            docker ps --format "{{.Names}}	{{.Image}}	{{.Status}}"
                            
                            echo -e "\nApplication Response:"
                            curl -s http://localhost:8080/
                            
                            echo -e "\nContainer Logs:"
                            if [ -f "docker-compose.yml" ]; then
                                docker compose logs --tail 20
                            else
                                docker logs spring-boot-app --tail 20
                            fi
                        '''
                        
                        // Write verification script to a file
                        writeFile file: 'verify.sh', text: verificationScript
                        
                        // Execute verification
                        sh """
                            chmod +x verify.sh
                            scp -i \$SSH_KEY -o StrictHostKeyChecking=no verify.sh ${EC2_USER}@${EC2_IP}:/tmp/verify.sh
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'bash /tmp/verify.sh'
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'rm /tmp/verify.sh'
                        """
                    }
                }
            }
        }
    
    post {
        always {
            script {
                sh 'docker logout'
                cleanWs()
            }
        }
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed. Check logs for details."
        }
    }
}