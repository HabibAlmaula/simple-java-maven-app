pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'habibalmaula/spring-boot-app'
        DOCKER_TAG = "v${BUILD_NUMBER}"
        AWS_DEFAULT_REGION = 'ap-southeast-1'
        EC2_USER = 'ubuntu'
        EC2_IP = '18.140.70.237'
        APP_NAME = 'spring-boot-app'
        DEPLOY_DIR = '/opt/springboot-app'
    }
    
    stages {
        stage('Build Application') {
            agent {
                docker {
                    image 'maven:3.9.5'
                    args '''
                        -v maven-repo:/root/.m2 
                        -e MAVEN_CONFIG=/root/.m2
                        -e HOME=/root
                        --user root
                    '''
                    reuseNode true
                }
            }
            steps {
                script {
                    // Clean workspace first
                    sh 'rm -rf target/'
                    
                    // Ensure Maven repository permissions
                    sh '''
                        mkdir -p $HOME/.m2/repository
                        chmod -R 777 $HOME/.m2
                        
                        # Print working directory and list files
                        pwd
                        ls -la
                        
                        # Build with detailed output
                        mvn clean package -DskipTests -X
                        
                        # Verify JAR file exists and show its details
                        ls -la target/
                        find . -name "*.jar" -type f
                    '''
                    
                    // Verify JAR exists before stashing
                    def jarFiles = findFiles(glob: 'target/*.jar')
                    if (jarFiles.length == 0) {
                        error "No JAR files found in target directory!"
                    }
                    
                    // Stash with verification
                    stash includes: 'target/*.jar', name: 'app-jar'
                    echo "Successfully stashed JAR file"
                }
            }
        }
        
        stage('Run Tests') {
            agent {
                docker {
                    image 'maven:3.9.5'
                    args '''
                        -v maven-repo:/root/.m2 
                        -e MAVEN_CONFIG=/root/.m2
                        -e HOME=/root
                        --user root
                    '''
                    reuseNode true
                }
            }
            steps {
                script {
                    sh '''
                        mkdir -p $HOME/.m2/repository
                        chmod -R 777 $HOME/.m2
                        mvn test
                    '''
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build & Push Docker Image') {
            steps {
                script {
                    // Create a fresh directory for the JAR
                    sh 'rm -rf docker-build && mkdir -p docker-build'
                    dir('docker-build') {
                        try {
                            // Unstash with verification
                            unstash 'app-jar'
                            
                            // Verify JAR was unstashed correctly
                            sh '''
                                echo "Contents of docker-build directory:"
                                ls -la
                                
                                echo "Looking for JAR files:"
                                find . -name "*.jar" -type f
                            '''
                            
                            // Copy Dockerfile to build context
                            sh 'cp ../Dockerfile .'
                            
                            // Build and push Docker image
                            withCredentials([usernamePassword(
                                credentialsId: 'docker-hub-credentials',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_PASS'
                            )]) {
                                sh '''
                                    echo \${DOCKER_PASS} | docker login -u \${DOCKER_USER} --password-stdin
                                    docker build --platform linux/amd64 -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                                    docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                                    docker push ${DOCKER_IMAGE}:latest
                                '''
                            }
                            // Confirm Docker image was pushed and continue to deploy
                            input message: 'Docker image telah dibuat dan di-push. Lanjutkan ke tahap deploy?'
                        } catch (Exception e) {
                            echo "Error during Docker build stage: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }

         stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        // Create deployment directory and docker-compose file
                        def setupCommands = """
                            mkdir -p ${DEPLOY_DIR}
                            
                            cat > ${DEPLOY_DIR}/docker-compose.yml << 'EOL'
version: "3.8"
services:
  app:
    image: ${DOCKER_IMAGE}:${DOCKER_TAG}
    container_name: ${APP_NAME}
    ports:
      - "8080:8080"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
EOL

                            # Pull and deploy the new version
                            cd ${DEPLOY_DIR}
                            docker compose pull
                            docker compose up -d --force-recreate
                            
                            # Wait for container to be healthy
                            echo "Waiting for container to be healthy..."
                            sleep 30
                            
                            # Check deployment status
                            docker compose ps
                            docker compose logs --tail 50
                        """
                        
                        // Execute deployment on EC2
                        sh """
                            ssh -i \${SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '${setupCommands}'
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh 'docker logout'
                cleanWs()
            }
        }
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed. Check logs for details."
        }
    }
}