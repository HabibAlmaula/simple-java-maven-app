pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'habibalmaula/spring-boot-app'
        DOCKER_TAG = "v0.1.0-${BUILD_NUMBER}"
        AWS_DEFAULT_REGION = 'ap-southeast-1'
        // EC2 Configuration
        EC2_USER = 'ubuntu'                    // The default user for Amazon Linux instances
        EC2_IP = '47.129.50.98'  // Replace with your EC2 instance's public IP

    }
    
    stages {
        stage('Build Application') {
            agent {
                docker {
                    image 'maven:3.9.5'
                    // Docker arguments are specified directly here
                    args '''
                        -v maven-repo:/root/.m2 
                        -e MAVEN_CONFIG=/root/.m2
                        -e HOME=/root
                        --user root
                    '''
                    
                }
            }
            steps {
                script {
                    // First ensure we have the correct directory structure
                    sh '''
                        mkdir -p $HOME/.m2/repository
                        chmod -R 777 $HOME/.m2
                        
                        echo "Maven environment:"
                        echo "HOME=$HOME"
                        echo "MAVEN_CONFIG=$MAVEN_CONFIG"
                        
                        mvn clean package -DskipTests
                    '''
                }
                stash includes: 'target/*.jar', name: 'app-jar'
            }
        }
        
        stage('Test') {
            agent {
                docker {
                    image 'maven:3.9.5'
                    // Same Docker arguments for consistency
                    args '''
                        -v maven-repo:/root/.m2 
                        -e MAVEN_CONFIG=/root/.m2
                        -e HOME=/root
                        --user root
                    '''
                }
            }
            steps {
                script {
                    sh '''
                        mkdir -p $HOME/.m2/repository
                        chmod -R 777 $HOME/.m2
                        mvn test
                    '''
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                unstash 'app-jar'
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                            echo \${DOCKER_PASS} | docker login -u \${DOCKER_USER} --password-stdin
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Setup EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        def setupCmd = """ 
                            # Create docker-compose.yml with proper indentation and variable expansion
                            cat > /opt/springboot-app/docker-compose.yml << EOF
        version: '3.8'
        services:
        app:
            image: \${DOCKER_IMAGE_NAME}:\${IMAGE_TAG}
            ports:
            - "8080:8080"
            restart: always
        EOF

                            # Verify the file was created
                            echo "Contents of docker-compose.yml:"
                            cat /opt/springboot-app/docker-compose.yml
                        """
                        
                        sh """
                            ssh -i \${SSH_KEY} -o StrictHostKeyChecking=no ubuntu@47.129.50.98 '${setupCmd}'
                        """
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        def deployCmd = """
                            # Export deployment variables
                            export DOCKER_IMAGE_NAME=${DOCKER_IMAGE}
                            export IMAGE_TAG=${DOCKER_TAG}
                            
                            # Navigate to app directory
                            cd /opt/springboot-app
                            
                            # Pull and restart containers
                            docker compose pull
                            docker compose up -d --force-recreate
                            
                            # Verify deployment
                            echo "Checking container status:"
                            docker compose ps
                        """
                        
                        sh """
                            ssh -i \${SSH_KEY} -o StrictHostKeyChecking=no ubuntu@47.129.50.98 '${deployCmd}'
                        """
                    }
                }
            }
        }

        // stage('Deploy to EC2') {
        //     steps {
        //         withCredentials([
        //             sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY'),
        //             aws(credentialsId: 'aws-credentials-id', region: 'ap-southeast-1')
        //         ]) {
        //             script {
        //                 def deployCmd = """
        //                     export DOCKER_IMAGE_NAME=${DOCKER_IMAGE}
        //                     export IMAGE_TAG=${DOCKER_TAG}
        //                     cd /opt/springboot-app
        //                     docker compose pull
        //                     docker compose up -d --force-recreate
        //                 """
                        
        //                 // Use the environment variables for SSH connection
        //                 sh """
        //                     ssh -i \${SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '${deployCmd}'
        //                 """
        //             }
        //         }
        //     }
        // }
    }
    
    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
    }
}